import apiConfig from '@/config/relysiaApi'

const mint = async (nftDetails) => {
  const { url, description, artworkName, supply, price } = nftDetails
  const parameters = {
    name: artworkName,
    protocolId: 'STAS',
    symbol: `${Math.random().toString(36).substring(2, 7)}`,
    description: description,
    image: url,
    tokenSupply: supply,
    satsPerToken: 1,
    splitable: false,
    properties: {
      legal: {
        terms:
          'Â© 2020 TAAL TECHNOLOGIES SEZC\nALL RIGHTS RESERVED. ANY USE OF THIS SOFTWARE IS SUBJECT TO TERMS AND CONDITIONS OF LICENSE. USE OF THIS SOFTWARE WITHOUT LICENSE CONSTITUTES INFRINGEMENT OF INTELLECTUAL PROPERTY. FOR LICENSE DETAILS OF THE SOFTWARE, PLEASE REFER TO: www.taal.com/stas-token-license-agreement',
        licenceId: 'BA',
      },
      issuer: {
        organisation: 'Vaionex Corp.',
        legalForm: 'Limited',
        governingLaw: 'US',
        issuerCountry: 'US',
        jurisdiction: 'US',
        email: 'info@vaionex.com',
      },
      meta: {
        schemaId: 'NFT1.0',
        website: 'openft.vercel.app',
        legal: {
          terms:
            'NFT minting showcase. The NFTs generated by users are for Openft.',
        },
        media: [
          {
            URI: 'B://6bcf4782b851ada735be89f6075e6e8415b3e72b30de1eebc58d5e0697c079f1',
            type: 'image/jpeg',
          },
        ],
      },
    },
  }

  const response = await apiConfig({
    url: '/v1/issue',
    method: 'POST',
    data: parameters,
  }).then((res) => res.data)
  //console.log(response);

  return {
    tokenId: response.data.tokenId,
    txId: response.data.tokenObj.issueTxid,
  }
}

export default mint
